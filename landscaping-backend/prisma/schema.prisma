generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email         String    @unique
  name          String
  created_at    DateTime  @default(now())
  password_hash String
  updated_at    DateTime  @updatedAt
  id            Int       @id @default(autoincrement())
  projects      Project[]
}

model Project {
  id          Int     @id @default(autoincrement())
  user_id     Int
  name        String
  description String?
  // New fields
  address     String?
  city        String?
  state       String?
  postal_code String?
  country     String?
  latitude    Float?
  longitude   Float?
  // keep the original simple location string for display/search if you like
  location    String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user      User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  estimates Estimate[]

  @@index([user_id])
  @@index([city, state, country])
  @@index([latitude, longitude])
}

model Assembly {
  id            String         @id @default(cuid())
  slug          String         @unique
  name          String
  trade         String // e.g., "Hardscape", "Irrigation"
  unit          String // e.g., "sqft", "lf"
  wastePct      Float          @default(0.05) // 5% default waste
  items         AssemblyItem[]
  templateLines TemplateLine[]
  estimateLines EstimateLine[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AssemblyItem {
  id         String   @id @default(cuid())
  assemblyId String
  assembly   Assembly @relation(fields: [assemblyId], references: [id], onDelete: Cascade)
  name       String
  unit       String // e.g., "pallet", "ton", "bag", "hr"
  unitCost   Decimal  @db.Decimal(10, 2)
  qtyFormula String // store a simple expression like "area/100" or "perimeter/10"
}

model Template {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  lines       TemplateLine[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model TemplateLine {
  id         String   @id @default(cuid())
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  assemblyId String
  assembly   Assembly @relation(fields: [assemblyId], references: [id], onDelete: Restrict)
  // optional defaults (e.g., base area, depth)
  defaults   Json?
}

model Estimate {
  id        String         @id @default(cuid())
  projectId Int            @map("project_id")
  // link to your Project model if you have one:
  project   Project?       @relation(fields: [projectId], references: [id])
  subtotal  Decimal        @default(0) @db.Decimal(12, 2)
  tax       Decimal        @default(0) @db.Decimal(12, 2)
  total     Decimal        @default(0) @db.Decimal(12, 2)
  lines     EstimateLine[]
  location  Json? // { zip, city, state, country }
  createdAt DateTime       @default(now())      @map("created_at")
  updatedAt DateTime       @updatedAt           @map("updated_at")
}

model EstimateLine {
  id         String   @id @default(cuid())
  estimateId String
  estimate   Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade)
  assemblyId String
  assembly   Assembly @relation(fields: [assemblyId], references: [id], onDelete: Restrict)
  inputs     Json // e.g., { area: 320, perimeter: 80, depthIn: 2 }
  items      Json // resolved items w/ qty & cost at calc-time
  lineTotal  Decimal  @db.Decimal(12, 2)
  notes      String?
}
